#!/bin/bash

# Pre-Requisites
echo Validating pre-requisites
az extension add --name virtual-wan 
az extension add --name azure-firewall 
# or updating vWAN and AzFirewall CLI extensions
az extension update --name virtual-wan
az extension update --name azure-firewall 

#Parameters
region=southcentralus
rg=lab-svh-vpner # set your Resource Group
vwanname=svh-avs-vpner # vWAN name
hubname=svhub # vHub name
username=azureuser # Username
password="Msft123Msft123" # Please change your password
vmsize=Standard_B1s # VM Size
firewallsku=Premium #Azure Firewall SKU Standard or Premium

#Variables
mypip=$(curl -4 ifconfig.io -s)

# Creating rg
az group create -n $rg -l $region --output none
echo Creating vWAN hub..
az network vwan create -g $rg -n $vwanname --branch-to-branch-traffic true --location $region --type Standard --output none
az network vhub create -g $rg --name $hubname --address-prefix 192.168.1.0/24 --vwan $vwanname --location $region --sku Standard --no-wait

echo Creating branch VNET...
# Creating location1 branch virtual network
az network vnet create --address-prefixes 10.100.0.0/16 -n branch -g $rg -l $region --subnet-name main --subnet-prefixes 10.100.0.0/24 --output none
az network vnet subnet create -g $rg --vnet-name branch -n GatewaySubnet --address-prefixes 10.100.100.0/26 --output none

echo Creating Spoke VNETs
# Spoke VNETs
az network vnet create --address-prefixes 172.16.1.0/24 -n spoke1 -g $rg -l $region --subnet-name main --subnet-prefixes 172.16.1.0/27 --output none
az network vnet create --address-prefixes 172.16.2.0/24 -n spoke2 -g $rg -l $region --subnet-name main --subnet-prefixes 172.16.2.0/27 --output none
az network vnet create --address-prefixes 172.16.3.0/24 -n spoke3 -g $rg -l $region --subnet-name main --subnet-prefixes 172.16.3.0/27 --output none

echo Creating NSG and associating to Spoke VNETs
#Updating NSGs:
az network nsg create --resource-group $rg --name default-nsg-$region --location $region -o none
# Adding my home public IP to NSG for SSH access
az network nsg rule create -g $rg --nsg-name default-nsg-$region -n 'default-allow-ssh' --direction Inbound --priority 100 --source-address-prefixes $mypip --source-port-ranges '*' --destination-address-prefixes '*' --destination-port-ranges 22 --access Allow --protocol Tcp --description "Allow inbound SSH" --output none
# Associating NSG to the VNET subnets (Spokes and Branches)
az network vnet subnet update --id $(az network vnet list -g $rg --query '[?contains(location,`'$region'`)].{id:subnets[0].id}' -o tsv) --network-security-group default-nsg-$region -o none

echo Creating VMs in the branch...
# Creating a VM in each branch spoke
az vm create -n branchVM  -g $rg --image Ubuntu2204 --public-ip-sku Standard --size $vmsize -l $region --subnet main --vnet-name branch --admin-username $username --admin-password $password --nsg "" --no-wait

echo Creating Spoke VMs...
# Creating a VM in each connected spoke
az vm create -n spoke1VM  -g $rg --image Ubuntu2204 --public-ip-sku Standard --size $vmsize -l $region --subnet main --vnet-name spoke1 --admin-username $username --admin-password $password --nsg "" --no-wait
az vm create -n spoke2VM  -g $rg --image Ubuntu2204 --public-ip-sku Standard --size $vmsize -l $region --subnet main --vnet-name spoke2 --admin-username $username --admin-password $password --nsg "" --no-wait
az vm create -n spoke3VM  -g $rg --image Ubuntu2204 --public-ip-sku Standard --size $vmsize -l $region --subnet main --vnet-name spoke3 --admin-username $username --admin-password $password --nsg "" --no-wait

echo Creating VPN Gateway in the branch...
# Creating pips for VPN GW's in each branch
az network public-ip create -n branch-vpngw-pip -g $rg --location $region --sku Basic --output none
# Creating VPN gateways
az network vnet-gateway create -n branch-vpngw --public-ip-addresses branch-vpngw-pip -g $rg --vnet branch --asn 65510 --gateway-type Vpn -l $region --sku VpnGw1 --vpn-gateway-generation Generation1 --no-wait 

echo Checking vHub provisioning status...
# Checking vHub provisioning and routing state 
prState=''
rtState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vhub show -g $rg -n $hubname --query 'provisioningState' -o tsv)
    echo "$hubname provisioningState="$prState
    sleep 5
done
while [[ $rtState != 'Provisioned' ]];
do
    rtState=$(az network vhub show -g $rg -n $hubname --query 'routingState' -o tsv)
    echo "$hubname routingState="$rtState
    sleep 5
done

echo Creating vHub VPN Gateway...
az network vpn-gateway create -n $hubname-vpngw -g $rg --location $region --vhub $hubname --no-wait 

echo Enabling boot diagnostics and installing VM tools...
#Enabling boot diagnostics for all VMs in the resource group (Serial console)
az vm boot-diagnostics enable --ids $(az vm list -g $rg --query [].id -o tsv) -o none

### Installing tools for networking connectivity validation such as traceroute, tcptraceroute, iperf and others (check link below for more details) 
nettoolsuri="https://raw.githubusercontent.com/dmauser/azure-vm-net-tools/main/script/nettools.sh"
for vm in `az vm list -g $rg --query "[?storageProfile.imageReference.offer=='UbuntuServer'].name" -o tsv`
do
 az vm extension set \
 --resource-group $rg \
 --vm-name $vm \
 --name customScript \
 --publisher Microsoft.Azure.Extensions \
 --protected-settings "{\"fileUris\": [\"$nettoolsuri\"],\"commandToExecute\": \"./nettools.sh\"}" \
 --no-wait
done

echo Configuring spoke1 and spoke3 vnet connection to their respective vHubs...

# **** Configuring vWAN route default route table to send traffic to the NVA and reach indirect spokes: *****
echo Configuring spoke connections to their respective hubs...
echo Creating spoke 1 and 3 connection to their respective hubs...
# Spoke1 vnet connection
az network vhub connection create -n spoke1conn --remote-vnet spoke1 -g $rg --vhub-name $hubname --no-wait
# Spoke2 vnet connection
az network vhub connection create -n spoke2conn --remote-vnet spoke2 -g $rg --vhub-name $hubname --no-wait
# Spoke3 vnet connection
az network vhub connection create -n spoke3conn --remote-vnet spoke3 -g $rg --vhub-name $hubname --no-wait

prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vhub connection show -n spoke1conn --vhub-name $hubname -g $rg  --query 'provisioningState' -o tsv)
    echo "vnet connection spoke1conn provisioningState="$prState
    sleep 5
done

prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vhub connection show -n spoke2conn --vhub-name $hubname -g $rg  --query 'provisioningState' -o tsv)
    echo "vnet connection spoke2conn provisioningState="$prState
    sleep 5
done

prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vhub connection show -n spoke3conn --vhub-name $hubname -g $rg  --query 'provisioningState' -o tsv)
    echo "vnet connection spoke3conn provisioningState="$prState
    sleep 5
done

echo Creating vHub ExpressRoute Gateway...
az network express-route gateway create -g $rg -n $hubname-ergw --location $region --min-val 1 --virtual-hub $hubname --output none &>/dev/null &

echo Creating Azure Firewall Policy
#Create firewall rules
fwpolicyname=$hubname-fwpolicy #Firewall Policy Name
az network firewall policy create --name $fwpolicyname --resource-group $rg --sku $firewallsku --enable-dns-proxy true --output none
az network firewall policy rule-collection-group create --name NetworkRuleCollectionGroup --priority 200 --policy-name $fwpolicyname --resource-group $rg --output none
#Adding any-to-any firewall rule
az network firewall policy rule-collection-group collection add-filter-collection \
 --resource-group $rg \
 --policy-name $fwpolicyname \
 --name GenericCollection \
 --rcg-name NetworkRuleCollectionGroup \
 --rule-type NetworkRule \
 --rule-name AnytoAny \
 --action Allow \
 --ip-protocols "Any" \
 --source-addresses "*" \
 --destination-addresses  "*" \
 --destination-ports "*" \
 --collection-priority 100 \
 --output none

echo Deploying Azure Firewall inside vHub...
fwpolid=$(az network firewall policy show --resource-group $rg --name $fwpolicyname --query id --output tsv)
az network firewall create -g $rg -n $hubname-azfw --sku AZFW_Hub --tier $firewallsku --virtual-hub $hubname --public-ip-count 1 --firewall-policy $fwpolid --location $region --output none &>/dev/null &

echo Validating Branches VPN Gateways provisioning...
#Branches VPN Gateways provisioning status
prState=$(az network vnet-gateway show -g $rg -n branch-vpngw --query provisioningState -o tsv)
if [[ $prState == 'Failed' ]];
then
    echo VPN Gateway is in fail state. Deleting and rebuilding.
    az network vnet-gateway delete -n branch-vpngw -g $rg
    az network vnet-gateway create -n branch-vpngw --public-ip-addresses branch-vpngw-pip -g $rg --vnet branch --asn 65510 --gateway-type Vpn -l $region --sku VpnGw1 --vpn-gateway-generation Generation1 --no-wait 
    sleep 5
else
    prState=''
    while [[ $prState != 'Succeeded' ]];
    do
        prState=$(az network vnet-gateway show -g $rg -n branch-vpngw --query provisioningState -o tsv)
        echo "branch-vpngw provisioningState="$prState
        sleep 5
    done
fi

echo Validating vHubs VPN Gateways provisioning...
#vWAN Hubs VPN Gateway Status
prState=$(az network vpn-gateway show -g $rg -n $hubname-vpngw --query provisioningState -o tsv)
if [[ $prState == 'Failed' ]];
then
    echo VPN Gateway is in fail state. Deleting and rebuilding.
    az network vpn-gateway delete -n $hubname-vpngw -g $rg
    az network vpn-gateway create -n $hubname-vpngw -g $rg --location $region --vhub $hubname --no-wait
    sleep 5
else
    prState=''
    while [[ $prState != 'Succeeded' ]];
    do
        prState=$(az network vpn-gateway show -g $rg -n $hubname-vpngw --query provisioningState -o tsv)
        echo $hubname-vpngw "provisioningState="$prState
        sleep 5
    done
fi

echo Checking ER Gateway provisioning status...
prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network express-route gateway show -g $rg -n $hubname-ergw --query provisioningState -o tsv)
    echo ExpressRoute Gateway $hubname-ergw "provisioningState="$prState
    sleep 5
done

echo Checking Firewall provisioning status...
prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network firewall show -g $rg -n $hubname-azfw --query 'provisioningState' -o tsv)
    echo "$hubname-azfw provisioningState="$prState
    sleep 5
done

msinsights=$(az provider show -n microsoft.insights --query registrationState -o tsv)
if [ $msinsights == 'NotRegistered' ] || [ $msinsights == 'Unregistered' ]; then
az provider register -n microsoft.insights --accept-terms
 prState=''
 while [[ $prState != 'Registered' ]];
 do
    prState=$(az provider show -n microsoft.insights --query registrationState -o tsv)
    echo "MS Insights State="$prState
    sleep 5
 done
fi

echo Enabling Azure Firewall diagnostics...
## Log Analytics workspace name. 
Workspacename=$hubname-$region-Logs

#Creating Log Analytics Workspaces
az monitor log-analytics workspace create -g $rg --workspace-name $Workspacename --location $region --output none

#EnablingAzure Firewall diagnostics
#az monitor diagnostic-settings show -n toLogAnalytics -g $rg --resource $(az network firewall show --name $hubname-azfw --resource-group $rg --query id -o tsv)
az monitor diagnostic-settings create -n 'toLogAnalytics' \
--resource $(az network firewall show --name $hubname-azfw --resource-group $rg --query id -o tsv) \
--workspace $(az monitor log-analytics workspace show -g $rg --workspace-name $Workspacename --query id -o tsv) \
--logs '[{"category":"AzureFirewallApplicationRule","Enabled":true}, {"category":"AzureFirewallNetworkRule","Enabled":true}, {"category":"AzureFirewallDnsProxy","Enabled":true}]' \
--metrics '[{"category": "AllMetrics","enabled": true}]' \
--output none

echo Building VPN connections from VPN Gateways to the respective Branches...
# get bgp peering and public ip addresses of VPN GW and VWAN to set up connection
bgp1=$(az network vnet-gateway show -n branch-vpngw -g $rg --query 'bgpSettings.bgpPeeringAddresses[0].defaultBgpIpAddresses[0]' -o tsv)
pip1=$(az network vnet-gateway show -n branch-vpngw -g $rg --query 'bgpSettings.bgpPeeringAddresses[0].tunnelIpAddresses[0]' -o tsv)
vwanbgp1=$(az network vpn-gateway show -n $hubname-vpngw -g $rg --query 'bgpSettings.bgpPeeringAddresses[0].defaultBgpIpAddresses[0]' -o tsv)
vwanpip1=$(az network vpn-gateway show -n $hubname-vpngw -g $rg --query 'bgpSettings.bgpPeeringAddresses[0].tunnelIpAddresses[0]' -o tsv)

# Creating virtual wan vpn site
az network vpn-site create --ip-address $pip1 -n site-branch -g $rg --asn 65510 --bgp-peering-address $bgp1 -l $region --virtual-wan $vwanname --device-model 'Azure' --device-vendor 'Microsoft' --link-speed '50' --with-link true --output none

# Creating virtual wan vpn connection
az network vpn-gateway connection create --gateway-name $hubname-vpngw -n site-branch-conn -g $rg --enable-bgp true --remote-vpn-site site-branch --internet-security --shared-key 'abc123' --output none

# Creating connection from vpn gw to local gateway and watch for connection succeeded
az network local-gateway create -g $rg -n site-$hubname-LG --gateway-ip-address $vwanpip1 --asn 65515 --bgp-peering-address $vwanbgp1 -l $region --output none
az network vpn-connection create -n branch-to-site-$hubname -g $rg -l $region --vnet-gateway1 branch-vpngw --local-gateway2 site-$hubname-LG --enable-bgp --shared-key 'abc123' --output none


#Enabling Secured-vHUB + Routing intent
echo "Enabling Secured-vHUB + Routing intent (Private Traffic only)"
nexthophub1=$(az network vhub show -g $rg -n $hubname --query azureFirewall.id -o tsv)
az deployment group create --name $hubname-ri \
--resource-group $rg \
--template-uri https://raw.githubusercontent.com/dmauser/azure-virtualwan/main/svh-ri-intra-region/bicep/main.json \
--parameters scenarioOption=PrivateOnly hubname=$hubname nexthop=$nexthophub1 \
--no-wait

subid=$(az account list --query "[?isDefault == \`true\`].id" --all -o tsv)
prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az rest --method get --uri /subscriptions/$subid/resourceGroups/$rg/providers/Microsoft.Network/virtualHubs/$hubname/routingIntent/$hubname_RoutingIntent?api-version=2022-01-01 --query 'value[].properties.provisioningState' -o tsv)
    echo "$hubname routing intent provisioningState="$prState
    sleep 5
done
echo Deployment has finished
